version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg16
    container_name: talentprompt-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-talentprompt}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-talentprompt}
      POSTGRES_DB: ${POSTGRES_DB:-talentprompt}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - talentprompt-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-talentprompt}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: talentprompt-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - talentprompt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant
    container_name: talentprompt-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - talentprompt-network
    environment:
      QDRANT__LOG_LEVEL: INFO

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: talentprompt-backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-talentprompt}:${POSTGRES_PASSWORD:-talentprompt}@postgres:5432/${POSTGRES_DB:-talentprompt}
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    networks:
      - talentprompt-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: builder
    container_name: talentprompt-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - talentprompt-network
    command: npm run dev

  # pgAdmin (optional, for database management)
  pgadmin:
    image: dpage/pgadmin4
    container_name: talentprompt-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@talentprompt.ai}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - talentprompt-network
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:
  qdrant_data:

networks:
  talentprompt-network:
    driver: bridge